const CONFIG={SELECTORS:{DPO_CONTAINER:".dpo-container",IV_TABLE:"#fieldset-section-3",EV_TABLE:"#fieldset-section-4",MOVES_TABLE:"#fieldset-section-5",META_BUILD:".MetaBuild",RADIO_OPTIONS:"#options-1001-list",PRODUCT_FORM_INPUT:".product-form__input",TRAINER_INFO_TABLE:"#fieldset-section-6",PRODUCT_TITLE:"h1.product__title, .product__title h1, h1.product-title, h1.product__title.heading, h1.title, h1"},LABELS:{SHINY:"Shiny",HELD_ITEM:"Held Item",LEVEL:"Level",ABILITY:"Ability",NATURE:"Nature",TERA_TYPE:"Tera Type",LANGUAGE:"Language",BALL:"Ball",GENDER:"Gender",MOVE_1:"Move 1",MOVE_2:"Move 2",MOVE_3:"Move 3",MOVE_4:"Move 4",OT_NAME:"Trainer Name",OT_GENDER:"Trainer Gender",TID:"TID",SID:"SID"},DATA_SOURCES:{LEVEL_RANGE:"level_range",GENDER_OPTIONS:"gender_options",MOVES_NAME:"moves.name",SHINY_UNLOCKED:"shiny_options_unlocked",SHINY_LOCKED:"shiny_options_locked",NATURES:"natures",TERA_TYPES:"tera_types",LANGUAGES:"languages",ABILITIES_NAME:"abilities.name",OT_GENDER_OPTIONS:"ot_gender_options"},URLS:{GAMES:{"Scarlet & Violet":{POKEMON_JSON:"https://cdn.shopify.com/s/files/1/0756/3051/0390/files/sorted_pokemon.json",ITEMS_JSON:"https://cdn.shopify.com/s/files/1/0756/3051/0390/files/items_sv.json"},"Sword & Shield":{POKEMON_JSON:"https://cdn.shopify.com/s/files/1/0756/3051/0390/files/swsh_pokemon.json",ITEMS_JSON:"https://cdn.shopify.com/s/files/1/0756/3051/0390/files/items_swsh.json"}}},EV_LIMIT:510,EV_STAT_LIMIT:252,IV_STAT_LIMIT:31,STATIC_DATA:{NATURES:["Adamant","Bashful","Bold","Brave","Calm","Careful","Docile","Gentle","Hardy","Hasty","Impish","Jolly","Lax","Lonely","Mild","Modest","Naive","Naughty","Quiet","Quirky","Rash","Relaxed","Sassy","Serious","Timid"],SHINY_OPTIONS:{unlocked:["No","Yes"],locked:["No"]},LANGUAGES:["English","Japanese","French","German","Italian","Spanish","Korean","ChineseS","ChineseT"],TERA_TYPES:["Bug","Dark","Dragon","Electric","Fairy","Fighting","Fire","Flying","Ghost","Grass","Ground","Ice","Normal","Poison","Psychic","Rock","Steel","Stellar","Water"],GENDER_OPTIONS:["Male","Female"],OT_GENDER_OPTIONS:["Male","Female"]}};class GameDetector{static getTitleElement(){return document.querySelector(CONFIG.SELECTORS.PRODUCT_TITLE)}static detectGameFromTitle(){const match=(this.getTitleElement()?.textContent?.trim()||"").match(/\[([^\]]+)\]\s*$/);if(!match)throw new Error("Game detection failed: product title does not end with [Game Name].");return match[1].trim()}static getGameUrls(gameName){const conf=(CONFIG.URLS.GAMES||{})[gameName];if(!conf?.POKEMON_JSON||!conf?.ITEMS_JSON)throw new Error(`Game "${gameName}" is not configured in CONFIG.URLS.GAMES.`);return conf}}class StyleManager{constructor(){if(StyleManager.instance)return StyleManager.instance;StyleManager.instance=this,this.addAllStyles()}addAllStyles(){const style=document.createElement("style");style.textContent=`
            :root {
                --brand-primary: #1289be; --brand-primary-dark: #0c7490; --brand-primary-light: #bae6fd; --brand-primary-bg: #f0f9ff;
                --brand-secondary: #0ea5e9; --brand-secondary-dark: #0284c7; --brand-secondary-light: #7dd3fc; --brand-secondary-bg: #e0f2fe;
                --neutral-50: #f8fafc; --neutral-100: #f1f5f9; --neutral-200: #e2e8f0; --neutral-300: #cbd5e1; --neutral-400: #94a3b8;
                --neutral-500: #64748b; --neutral-600: #475569; --neutral-700: #334155; --neutral-800: #1e293b; --neutral-900: #0f172a;
                --success-500: #10b981; --warning-500: #f59e0b; --error-500: #ef4444; --error-100: #fee2e2; --error-200: #fecaca;
                --spacing-xs: 4px; --spacing-sm: 8px; --spacing-md: 12px; --spacing-lg: 16px; --spacing-xl: 20px; --spacing-2xl: 24px;
                --border-radius-sm: 8px; --border-radius-md: 12px; --border-radius-lg: 16px;
                --shadow-sm: 0 1px 3px rgba(18, 137, 190, 0.15); --shadow-md: 0 4px 12px rgba(18, 137, 190, 0.25); --shadow-lg: 0 4px 20px rgba(18, 137, 190, 0.2);
            }
            .dpo-container, .dpo-container .field, .dpo-container .control, .dpo-container .form-list, .dpo-container .form-list td, .dpo-container .form-list .field { margin-left: 0 !important; padding-left: 0 !important; width: 100% !important; }
            .dpo-container { max-width: none !important; } .dpo-container .form-list { table-layout: fixed !important; }
            .product-form__input:has(.dpo-container) { margin-left: 0 !important; padding-left: 0 !important; }
            .modern-dropdown-container { position: relative; width: 100%; margin: var(--spacing-sm) 0; }
            .modern-dropdown, #itoris_dynamicproductoptions .modern-stats-container .modern-stat-field .input-text,
            #itoris_dynamicproductoptions .modern-trainer-info-container .modern-trainer-info-field .input-text,
            .modern-move-field .modern-dropdown, .modern-trainer-info-field .modern-dropdown {
                width: 100% !important; height: 48px; padding: var(--spacing-md) 40px var(--spacing-md) var(--spacing-lg) !important;
                background: #ffffff !important; border: 2px solid var(--brand-primary-light) !important; border-radius: var(--border-radius-md) !important;
                font-size: 14px !important; font-weight: 500 !important; color: var(--brand-primary-dark) !important; cursor: pointer; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                box-shadow: var(--shadow-sm) !important; appearance: none; box-sizing: border-box !important;
            }
            #itoris_dynamicproductoptions .modern-stats-container .modern-stat-field .input-text,
            #itoris_dynamicproductoptions .modern-trainer-info-container .modern-trainer-info-field .input-text { padding-right: var(--spacing-lg) !important; }
            .modern-dropdown-arrow { position: absolute; top: 0; right: 0; width: 48px; height: 48px; display: flex; align-items: center; justify-content: flex-end; padding-right: var(--spacing-lg); box-sizing: border-box; pointer-events: none; color: var(--brand-primary); }
            .modern-dropdown-arrow svg { width: 16px; height: 16px; }
            .modern-dropdown:hover, #itoris_dynamicproductoptions .modern-stats-container .modern-stat-field .input-text:hover,
            #itoris_dynamicproductoptions .modern-trainer-info-container .modern-trainer-info-field .input-text:hover,
            .modern-move-field .modern-dropdown:hover, .modern-trainer-info-field .modern-dropdown:hover { border-color: var(--brand-primary) !important; box-shadow: var(--shadow-md) !important; }
            .modern-dropdown:focus, #itoris_dynamicproductoptions .modern-stats-container .modern-stat-field .input-text:focus,
            #itoris_dynamicproductoptions .modern-trainer-info-container .modern-trainer-info-field .input-text:focus,
            .modern-move-field .modern-dropdown:focus, .modern-trainer-info-field .modern-dropdown:focus {
                outline: none !important; border-color: var(--brand-primary) !important; box-shadow: 0 0 0 3px rgba(18, 137, 190, 0.15), var(--shadow-md) !important;
            }
            .modern-dropdown option { padding: var(--spacing-sm) var(--spacing-md); color: var(--neutral-700); background: #ffffff; }
            .modern-dropdown option:disabled { color: var(--neutral-400); background: var(--neutral-100); }
            .modern-stats-container, .modern-moves-container, .modern-trainer-info-container {
                display: grid !important; gap: var(--spacing-xl) !important; width: 100% !important; padding: var(--spacing-2xl) !important;
                background: var(--brand-primary-bg) !important; border-radius: var(--border-radius-lg) !important; box-shadow: 0 4px 20px rgba(18, 137, 190, 0.1) !important; border: 1px solid var(--brand-primary-light) !important; align-items: start !important;
            }
            .modern-stats-container { grid-template-columns: repeat(3, 1fr) !important; grid-template-rows: repeat(2, 1fr) !important; }
            .modern-moves-container, .modern-trainer-info-container { grid-template-columns: repeat(2, 1fr) !important; grid-template-rows: repeat(2, 1fr) !important; }
            .modern-stat-field, .modern-move-field, .modern-trainer-info-field { width: 100% !important; position: relative !important; }
            .modern-stat-field .field, .modern-move-field .field, .modern-trainer-info-field .field { margin: 0 !important; width: 100% !important; }
            .modern-stat-field .control, .modern-move-field .control, .modern-trainer-info-field .control { display: block !important; margin-top: var(--spacing-sm) !important; width: 100% !important; position: relative !important; }
            .modern-stat-field label, .modern-move-field label, .modern-trainer-info-field label {
                display: block !important; margin-bottom: var(--spacing-sm) !important; font-size: 13px !important; font-weight: 600 !important; color: var(--brand-primary-dark) !important; text-transform: uppercase !important; letter-spacing: 0.5px !important;
            }
            .modern-stat-field .input-text.invalid { border-color: var(--error-500) !important; box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important; }
            .modern-ev-total-container { grid-column: 1 / -1 !important; margin-top: var(--spacing-xl) !important; text-align: center !important; padding: var(--spacing-xl) !important; background: var(--brand-primary) !important; border-radius: var(--border-radius-lg) !important; border: 1px solid var(--brand-primary-dark) !important; box-shadow: var(--shadow-lg) !important; }
            .modern-ev-total-label { display: block !important; margin-bottom: var(--spacing-sm) !important; font-size: 13px !important; font-weight: 600 !important; color: var(--brand-primary-light) !important; text-transform: uppercase !important; letter-spacing: 0.5px !important; }
            .modern-ev-total { font-size: 24px !important; font-weight: 700 !important; color: #ffffff !important; margin-bottom: var(--spacing-xs) !important; transition: color 0.3s ease !important; }
            .modern-ev-available { display: block !important; font-size: 14px !important; color: var(--brand-primary-light) !important; font-weight: 500 !important; transition: color 0.3s ease !important; }
            .modern-button-selector-container { display: block !important; width: 100% !important; margin: var(--spacing-md) 0 !important; padding: 0 !important; margin-left: 0 !important; padding-left: 0 !important; position: relative !important; left: 0 !important; box-sizing: border-box !important; }
            .modern-button-selector { display: flex !important; width: 100% !important; border-radius: var(--border-radius-md) !important; overflow: hidden !important; box-shadow: 0 4px 20px rgba(18, 137, 190, 0.15) !important; border: 2px solid var(--brand-primary-light) !important; margin: 0 !important; padding: 0 !important; box-sizing: border-box !important; }
            .modern-button-option { flex: 1 !important; display: flex !important; align-items: center !important; justify-content: center !important; padding: var(--spacing-lg) var(--spacing-xl) !important; background: #ffffff !important; cursor: pointer !important; font-weight: 600 !important; font-size: 14px !important; color: var(--brand-primary-dark) !important; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important; border: none !important; position: relative !important; overflow: hidden !important; }
            .modern-button-option:not(:last-child) { border-right: 1px solid var(--brand-primary-light) !important; }
            .modern-button-option:hover:not(.selected) { background: var(--brand-primary-bg) !important; color: var(--brand-primary-dark) !important; }
            .modern-button-option.selected { background: var(--brand-primary) !important; color: white !important; box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2) !important; }
            .modern-button-option.selected::before { content: '' !important; position: absolute !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important; background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%) !important; animation: shimmer 2s infinite !important; }
            .modern-button-price { margin-left: var(--spacing-sm) !important; font-size: 12px !important; opacity: 0.8 !important; font-weight: 500 !important; }
            .modern-button-option.selected .modern-button-price { color: rgba(255, 255, 255, 0.9) !important; }
            .modern-button-selector-container .radio { position: absolute !important; opacity: 0 !important; width: 0 !important; height: 0 !important; pointer-events: none !important; }
            .move-conflict-warning { position: absolute !important; top: -8px !important; right: -8px !important; width: 20px !important; height: 20px !important; background: var(--error-500) !important; color: white !important; border-radius: 50% !important; display: flex !important; align-items: center !important; justify-content: center !important; font-size: 12px !important; font-weight: bold !important; z-index: 10 !important; animation: pulse 1s infinite !important; }
            .modern-meta-build { padding: var(--spacing-2xl) !important; margin: var(--spacing-xl) 0 !important; margin-left: 0 !important; padding-left: var(--spacing-2xl) !important; background: var(--brand-primary-bg) !important; border-radius: var(--border-radius-lg) !important; box-shadow: var(--shadow-lg) !important; border: 1px solid var(--brand-primary-light) !important; position: relative !important; overflow: hidden !important; width: 100% !important; box-sizing: border-box !important; }
            .modern-meta-build::before { content: '' !important; position: absolute !important; top: 0 !important; left: 0 !important; right: 0 !important; height: 4px !important; background: var(--brand-primary) !important; }
            .meta-build-header { display: flex !important; align-items: center !important; margin-bottom: var(--spacing-lg) !important; gap: var(--spacing-md) !important; }
            .meta-build-icon { width: 32px !important; height: 32px !important; background: var(--brand-primary) !important; border-radius: var(--border-radius-sm) !important; display: flex !important; align-items: center !important; justify-content: center !important; color: white !important; font-weight: bold !important; font-size: 16px !important; }
            .meta-build-title { font-size: 18px !important; font-weight: 700 !important; color: var(--brand-primary-dark) !important; margin: 0 !important; }
            .meta-build-content { font-size: 14px !important; line-height: 1.6 !important; color: var(--neutral-700) !important; white-space: pre-wrap !important; }
            .meta-build-loading { display: flex !important; align-items: center !important; justify-content: center !important; padding: 40px !important; color: var(--brand-primary) !important; font-style: italic !important; }
            .meta-build-error { text-align: center !important; color: var(--error-500) !important; font-style: italic !important; padding: var(--spacing-xl) !important; }
            @keyframes shimmer { 0% { transform: translateX(-100%); } 100% { transform: translateX(100%); } }
            @keyframes pulse { 0%, 100% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.1); opacity: 0.8; } }
            @media (max-width: 768px) {
                .modern-dropdown, .modern-button-option { padding: 10px 14px !important; font-size: 16px !important; }
                .modern-stats-container { grid-template-columns: repeat(2, 1fr) !important; grid-template-rows: repeat(3, 1fr) !important; gap: var(--spacing-lg) !important; padding: var(--spacing-lg) !important; }
                .modern-moves-container, .modern-trainer-info-container { grid-template-columns: 1fr !important; grid-template-rows: repeat(4, 1fr) !important; gap: var(--spacing-lg) !important; padding: var(--spacing-lg) !important; }
            }
        `,document.head.appendChild(style)}}class PokemonDataStore{constructor(pokemonJsonUrl,itemsJsonUrl){this.pokemonJsonUrl=pokemonJsonUrl,this.itemsJsonUrl=itemsJsonUrl,this.pokemonData=null,this.itemsData=null,this.currentPokemonData=null,this.pokemonLoadPromise=null,this.itemsLoadPromise=null,this.cache=new Map}static getPokedexNumberFromUrl(){const urlParts=window.location.pathname.split("/"),match=urlParts[urlParts.length-1].match(/(\d{4}(?:-\d+)?)/);return match?match[1]:null}async loadData(){return this.pokemonLoadPromise?this.pokemonLoadPromise:this.pokemonData?this.pokemonData:(this.pokemonLoadPromise=this._fetchPokemonData(),this.pokemonLoadPromise)}async _fetchPokemonData(){try{const response=await fetch(this.pokemonJsonUrl);if(!response.ok)throw new Error(`HTTP ${response.status}: ${response.statusText}`);this.pokemonData=await response.json();const pokedexNumber=PokemonDataStore.getPokedexNumberFromUrl();return pokedexNumber&&this.pokemonData[pokedexNumber]&&(this.currentPokemonData=this.pokemonData[pokedexNumber]),this.pokemonData}catch(error){throw console.error("Failed to fetch Pokemon data:",error),error}}async loadItemsData(){return this.itemsLoadPromise?this.itemsLoadPromise:this.itemsData?this.itemsData:(this.itemsLoadPromise=this._fetchItemsData(),this.itemsLoadPromise)}async _fetchItemsData(){try{const response=await fetch(this.itemsJsonUrl);if(!response.ok)throw new Error(`HTTP ${response.status}: ${response.statusText}`);return this.itemsData=await response.json(),this.itemsData}catch(error){throw console.error("Failed to fetch items data:",error),error}}async getCurrentPokemonData(){return await this.loadData(),this.currentPokemonData}async getBatchPokemonData(properties){const pokemon=await this.getCurrentPokemonData();return properties.reduce((acc,prop)=>(acc[prop]=this.extractDataFromPath(pokemon,prop),acc),{})}extractDataFromPath(pokemonData,path){try{return path.split(".").reduce((obj,key)=>Array.isArray(obj)?obj.map(item=>item[key]).filter(Boolean):obj&&obj[key],pokemonData)}catch(error){return console.error(`Error extracting data from path ${path}:`,error),null}}async getAllItems(){return await this.loadItemsData(),this.itemsData}}class BaseManager{constructor(eventManager=null){this.initialized=new Set,this.styleManager=new StyleManager,this.validationAdded=new Set,this.eventManager=eventManager}createContainer(className){const container=document.createElement("div");return container.className=className,container}wrapField(field,wrapperClass){const wrapper=document.createElement("div");return wrapper.className=wrapperClass,wrapper.appendChild(field),wrapper}addNumericValidation(input,maxLength,type="generic"){if(!input||this.validationAdded.has(input.id))return;input.setAttribute("inputmode","numeric"),input.setAttribute("pattern","[0-9]*"),maxLength&&(input.maxLength=maxLength);const handler=e=>{e.target.value=e.target.value.replace(/\D/g,"");const value=e.target.value.trim();if(value===""){e.target.classList.remove("invalid"),type==="ev"&&this.eventManager?.updateEVTotal();return}let numValue=parseInt(value,10);if(isNaN(numValue)||numValue<0){e.target.value="",e.target.classList.remove("invalid"),type==="ev"&&this.eventManager?.updateEVTotal();return}if(type==="iv")numValue>CONFIG.IV_STAT_LIMIT&&(numValue=CONFIG.IV_STAT_LIMIT,e.target.value=numValue);else if(type==="ev"){const evContainer=e.target.closest(".modern-stats-container");if(evContainer){const otherTotal=Array.from(evContainer.querySelectorAll('input[type="text"]')).filter(inp=>inp!==e.target).reduce((sum,inp)=>{const val=parseInt(inp.value.trim()||"0",10);return sum+(isNaN(val)?0:Math.max(0,val))},0);otherTotal+numValue>CONFIG.EV_LIMIT&&(numValue=Math.max(0,CONFIG.EV_LIMIT-otherTotal),e.target.value=numValue),numValue>CONFIG.EV_STAT_LIMIT&&(numValue=CONFIG.EV_STAT_LIMIT,e.target.value=numValue),this.eventManager?.updateEVTotal()}}else maxLength&&e.target.value.length>maxLength&&(e.target.value=e.target.value.slice(0,maxLength));e.target.classList.remove("invalid")};input.addEventListener("keypress",e=>{const charCode=e.which||e.keyCode;charCode>31&&(charCode<48||charCode>57)&&e.preventDefault()}),input.addEventListener("input",handler),input.addEventListener("blur",handler),input.addEventListener("paste",e=>{e.preventDefault();const filteredData=(e.clipboardData||window.clipboardData).getData("text").replace(/\D/g,"");filteredData&&(input.value=filteredData.substring(0,maxLength||filteredData.length),input.dispatchEvent(new Event("input",{bubbles:!0})))}),this.validationAdded.add(input.id)}}class DropdownSyncManager{constructor(){this.syncPairs=new Map,this.healthCheckInterval=null,this.retryAttempts=new Map,this.maxRetries=3,this.startHealthMonitoring()}registerSyncPair(select,input,label){const pairId=`${input.id}_${Date.now()}`,syncPair={id:pairId,select,input,label,lastSyncTime:Date.now(),syncFailures:0,isDestroyed:!1};return this.syncPairs.set(pairId,syncPair),this.setupSyncMechanisms(syncPair),pairId}setupSyncMechanisms(syncPair){const{select,input,label,id}=syncPair,performSync=(source="unknown",forceSync=!1)=>{if(syncPair.isDestroyed)return!1;if(!input.parentNode||!select.parentNode)return console.warn(`\u{1F6A8} DOM elements disconnected for ${label}, marking as destroyed`),this.destroySyncPair(id),!1;const oldValue=input.value,newValue=select.value;if(oldValue===newValue&&!forceSync)return!0;try{return requestAnimationFrame(()=>{if(syncPair.isDestroyed)return;input.value=newValue;const inputEvent=new Event("input",{bubbles:!0,cancelable:!0}),changeEvent=new Event("change",{bubbles:!0,cancelable:!0});input.dispatchEvent(inputEvent),input.dispatchEvent(changeEvent),setTimeout(()=>{input.value===newValue?(syncPair.lastSyncTime=Date.now(),syncPair.syncFailures=0,console.log(`\u2705 Sync successful for ${label}: "${newValue}" (source: ${source})`)):this.handleSyncFailure(syncPair,source,oldValue,newValue)},10)}),!0}catch(error){return console.error(`\u274C Sync error for ${label}:`,error),this.handleSyncFailure(syncPair,source,oldValue,newValue),!1}},safeEventHandler=source=>()=>{try{performSync(source)}catch(error){console.error(`Event handler error for ${label}:`,error)}};select.addEventListener("change",safeEventHandler("change")),select.addEventListener("blur",safeEventHandler("blur"));const observer=new MutationObserver(mutations=>{let shouldSync=!1;mutations.forEach(mutation=>{mutation.type==="attributes"&&mutation.attributeName==="value"&&mutation.target===input&&(shouldSync=!0)}),shouldSync&&performSync("mutation-observer")});observer.observe(input,{attributes:!0,attributeFilter:["value"],attributeOldValue:!0});const selectObserver=new MutationObserver(()=>{performSync("select-mutation")});selectObserver.observe(select,{attributes:!0,attributeFilter:["value"],childList:!0}),syncPair.observers=[observer,selectObserver],syncPair.performSync=performSync,setTimeout(()=>performSync("initial",!0),25),setTimeout(()=>performSync("secondary-initial",!1),100),setTimeout(()=>performSync("final-initial",!1),250)}handleSyncFailure(syncPair,source,oldValue,newValue){if(syncPair.syncFailures++,console.warn(`\u26A0\uFE0F Sync failure #${syncPair.syncFailures} for ${syncPair.label}: "${oldValue}" -> "${newValue}" (source: ${source})`),syncPair.syncFailures<=this.maxRetries){const retryDelay=Math.pow(2,syncPair.syncFailures)*100;setTimeout(()=>{syncPair.isDestroyed||(console.log(`\u{1F504} Retry attempt ${syncPair.syncFailures} for ${syncPair.label}`),syncPair.performSync(`retry-${syncPair.syncFailures}`,!0))},retryDelay)}else console.error(`\u{1F4A5} Max retries exceeded for ${syncPair.label}, escalating to emergency sync`),this.emergencySync(syncPair)}emergencySync(syncPair){try{const correctValue=syncPair.select.value;syncPair.input.setAttribute("value",correctValue),syncPair.input.value=correctValue,syncPair.input.form&&syncPair.input.form.dispatchEvent(new Event("input",{bubbles:!0})),console.log(`\u{1F691} Emergency sync completed for ${syncPair.label}: "${correctValue}"`)}catch(error){console.error(`\u{1F480} Emergency sync failed for ${syncPair.label}:`,error)}}startHealthMonitoring(){this.healthCheckInterval=setInterval(()=>{this.performHealthCheck()},5e3)}performHealthCheck(){let issuesFound=0;this.syncPairs.forEach((syncPair,id)=>{if(!syncPair.isDestroyed){if(!document.contains(syncPair.input)||!document.contains(syncPair.select)){console.log(`\u{1F9F9} Cleaning up destroyed sync pair: ${syncPair.label}`),this.destroySyncPair(id);return}syncPair.select.value!==syncPair.input.value&&(issuesFound++,console.log(`\u{1F50D} Health check found drift in ${syncPair.label}: select="${syncPair.select.value}" vs input="${syncPair.input.value}"`),syncPair.performSync("health-check",!0))}}),issuesFound===0&&this.syncPairs.size>0&&console.log(`\u{1F49A} Health check passed for ${this.syncPairs.size} dropdown pairs`)}destroySyncPair(id){const syncPair=this.syncPairs.get(id);syncPair&&(syncPair.isDestroyed=!0,syncPair.observers&&syncPair.observers.forEach(observer=>observer.disconnect()),this.syncPairs.delete(id))}cleanup(){this.healthCheckInterval&&clearInterval(this.healthCheckInterval),this.syncPairs.forEach((_,id)=>this.destroySyncPair(id))}getStatus(){const status={totalPairs:this.syncPairs.size,healthyPairs:0,problematicPairs:0,pairs:[]};return this.syncPairs.forEach(syncPair=>{const isHealthy=syncPair.select.value===syncPair.input.value;isHealthy?status.healthyPairs++:status.problematicPairs++,status.pairs.push({label:syncPair.label,selectValue:syncPair.select.value,inputValue:syncPair.input.value,isHealthy,syncFailures:syncPair.syncFailures,lastSyncTime:new Date(syncPair.lastSyncTime).toLocaleTimeString()})}),status}forceResyncAll(){let resynced=0;return this.syncPairs.forEach(syncPair=>{syncPair.isDestroyed||(syncPair.performSync("manual-force",!0),resynced++)}),resynced}}const globalSyncManager=new DropdownSyncManager;class DropdownFactory{static create(input,options,label,defaultValue=null){if(!input)return null;input.type="hidden";const container=document.createElement("div");container.className="modern-dropdown-container";const select=document.createElement("select");select.className="modern-dropdown",select.innerHTML=`<option value="">${label}</option>`+options.map(opt=>`<option value="${opt.value||opt}">${opt.display||opt}</option>`).join(""),defaultValue&&options.some(opt=>(typeof opt=="object"?opt.value:opt)===defaultValue)&&(select.value=defaultValue,input.value=defaultValue),container.append(select,this.createArrow()),input.parentNode.insertBefore(container,input.nextSibling);const fieldLabel=input.closest(".field")?.querySelector("label")?.textContent?.trim()||input.id||"Unknown",syncId=globalSyncManager.registerSyncPair(select,input,fieldLabel);return select._syncId=syncId,select}static createArrow(){const arrow=document.createElement("div");return arrow.className="modern-dropdown-arrow",arrow.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 8 4 4 4-4"/></svg>',arrow}}class EventManager{constructor(){this.evInputs=[],this.evTotalElement=null,this.evAvailableElement=null,this.setupDelegatedEvents()}setupDelegatedEvents(){document.addEventListener("change",e=>{e.target.matches(".modern-dropdown")&&e.target.closest(".modern-moves-container")&&this.updateMoveValidation()}),document.addEventListener("input",e=>{e.target.matches('[inputmode="numeric"]')&&e.target.closest("#fieldset-section-4")&&this.updateEVTotal()})}updateEVTotal(){if(!this.evTotalElement||!this.evAvailableElement)return;let total=0;this.evInputs.forEach(input=>{const value=parseInt(input.value.trim()||"0",10);!isNaN(value)&&value>=0&&(total+=value)});const available=Math.max(0,510-total);this.evTotalElement.textContent=`${total} / 510`,this.evAvailableElement.textContent=`${available} points remaining`}updateMoveValidation(){const moveDropdowns=Array.from(document.querySelectorAll(".modern-moves-container .modern-dropdown"));moveDropdowns.length===4&&moveDropdowns.forEach(currentDropdown=>{const selectedMoves=moveDropdowns.filter(dropdown=>dropdown!==currentDropdown).map(dropdown=>dropdown.value).filter(value=>value!=="");Array.from(currentDropdown.options).forEach(option=>{const isDuplicate=option.value!==""&&selectedMoves.includes(option.value);option.disabled=isDuplicate,option.style.display=isDuplicate?"none":""});const fieldContainer=currentDropdown.closest(".modern-move-field"),existingWarning=fieldContainer.querySelector(".move-conflict-warning");if(currentDropdown.value!==""&&selectedMoves.includes(currentDropdown.value)){if(!existingWarning){const warning=document.createElement("div");warning.className="move-conflict-warning",warning.textContent="!",warning.title="Duplicate move selected",fieldContainer.appendChild(warning)}}else existingWarning&&existingWarning.remove()})}addEVInputs(inputs){this.evInputs=inputs}setEVElements(totalElement,availableElement){this.evTotalElement=totalElement,this.evAvailableElement=availableElement}}class GridLayoutManager extends BaseManager{constructor(eventManager){super(),this.eventManager=eventManager,this.configs={stats:{selector:CONFIG.SELECTORS.IV_TABLE.substring(1),className:"modern-stats-container",fieldClass:"modern-stat-field",order:[0,1,2,4,3,5]},evs:{selector:CONFIG.SELECTORS.EV_TABLE.substring(1),className:"modern-stats-container",fieldClass:"modern-stat-field",order:[0,1,2,4,3,5]},moves:{selector:CONFIG.SELECTORS.MOVES_TABLE.substring(1),className:"modern-moves-container",fieldClass:"modern-move-field"},trainer:{selector:CONFIG.SELECTORS.TRAINER_INFO_TABLE.substring(1),className:"modern-trainer-info-container",fieldClass:"modern-trainer-info-field"}}}async initAll(){const promises=Object.entries(this.configs).map(([type,config])=>this.initSection(type,config));await Promise.all(promises)}async initSection(type,config){const section=await waitForElement(`#${config.selector}`);if(!section||this.initialized.has(type))return;let fields=this.getFields(section,type);if(!fields||fields.length===0)return;const container=this.createContainer(config.className);config.order?config.order.forEach(index=>{fields[index]&&container.appendChild(this.wrapField(fields[index],config.fieldClass))}):fields.forEach(field=>container.appendChild(this.wrapField(field,config.fieldClass))),section.querySelector("table")?.replaceWith(container),this.addTypeSpecificFeatures(type,container),this.initialized.add(type)}getFields(section,type){if(type==="stats"||type==="evs"){const fields=Array.from(section.querySelectorAll('[id^="dynamic_option_id_"]'));return fields.length===6?fields:null}else if(type==="moves"){const fields=Array.from(section.querySelectorAll(".field")).filter(field=>{const label=field.querySelector("label");return label&&label.textContent.includes("Move")});return fields.length===4?fields:null}else if(type==="trainer"){const fields=[CONFIG.LABELS.OT_NAME,CONFIG.LABELS.OT_GENDER,CONFIG.LABELS.TID,CONFIG.LABELS.SID].map(label=>InputFinder.findInputByLabel(label)?.closest(".field")).filter(Boolean);return fields.length>0?fields:null}return null}addTypeSpecificFeatures(type,container){const inputFields=container.querySelectorAll('input[type="text"]');if(type==="stats")inputFields.forEach(input=>this.addNumericValidation(input,null,"iv"));else if(type==="evs"){const evInputs=Array.from(inputFields);evInputs.forEach(input=>this.addNumericValidation(input,null,"ev")),this.eventManager.addEVInputs(evInputs),this.addEVTotalCounter(container)}else type==="trainer"&&inputFields.forEach(input=>{const labelText=input.closest(".field").querySelector("label").textContent.trim();labelText===CONFIG.LABELS.OT_NAME?input.maxLength=12:labelText===CONFIG.LABELS.TID?this.addNumericValidation(input,6):labelText===CONFIG.LABELS.SID&&this.addNumericValidation(input,4)})}addEVTotalCounter(container){const totalContainer=document.createElement("div");totalContainer.className="modern-ev-total-container",totalContainer.innerHTML=`
            <span class="modern-ev-total-label">Total EVs</span>
            <div class="modern-ev-total">0 / 510</div>
            <span class="modern-ev-available">510 points remaining</span>
        `,container.appendChild(totalContainer);const totalValue=totalContainer.querySelector(".modern-ev-total"),availableEVs=totalContainer.querySelector(".modern-ev-available");this.eventManager.setEVElements(totalValue,availableEVs)}}class ModernButtonSelectorManager extends BaseManager{constructor(eventManager=null){super(eventManager)}createButtonSelector(radioContainer){if(!radioContainer)return;const radioButtons=Array.from(radioContainer.querySelectorAll('input[type="radio"]'));if(radioButtons.length!==2)return;const regularLabel=radioContainer.querySelector('label[for="options_1001_2"] span')?.textContent??"Regular",customLabelElement=radioContainer.querySelector('label[for="options_1001_3"]'),customLabel=customLabelElement?.querySelector("span")?.textContent??"Custom",priceText=customLabelElement?.querySelector(".price-notice")?.textContent??"",selectorContainer=document.createElement("div");selectorContainer.className="modern-button-selector-container";const buttonSelector=document.createElement("div");buttonSelector.className="modern-button-selector";const regularButton=this.createButton(regularLabel,"regular"),customButton=this.createButton(customLabel,"custom",priceText);buttonSelector.append(regularButton,customButton),selectorContainer.appendChild(buttonSelector),radioButtons[0].checked?regularButton.classList.add("selected"):radioButtons[1].checked?customButton.classList.add("selected"):(regularButton.classList.add("selected"),radioButtons[0].checked=!0),this.attachButtonEvents(regularButton,customButton,radioButtons),radioContainer.style.display="none",radioContainer.parentNode.insertBefore(selectorContainer,radioContainer)}createButton(label,type,priceText=""){const button=document.createElement("div");return button.className="modern-button-option",button.setAttribute("role","button"),button.setAttribute("tabindex","0"),button.setAttribute("data-type",type),button.innerHTML=`<span>${label}</span>`+(priceText?`<span class="modern-button-price">${priceText}</span>`:""),button}attachButtonEvents(regularButton,customButton,radioButtons){const selectButton=(selectedButton,otherButton,radioIndex)=>{selectedButton.classList.add("selected"),otherButton.classList.remove("selected"),radioButtons[radioIndex].checked=!0,radioButtons[radioIndex].dispatchEvent(new Event("change",{bubbles:!0}))};regularButton.addEventListener("click",()=>selectButton(regularButton,customButton,0)),customButton.addEventListener("click",()=>selectButton(customButton,regularButton,1)),[regularButton,customButton].forEach(button=>{button.addEventListener("keydown",e=>{(e.key==="Enter"||e.key===" ")&&(e.preventDefault(),button.click())})})}init(){const radioContainer=document.getElementById(CONFIG.SELECTORS.RADIO_OPTIONS.substring(1));radioContainer&&this.createButtonSelector(radioContainer)}}class ModernMetaBuildManager extends BaseManager{constructor(dataStore){super(),this.dataStore=dataStore}formatMetaBuild(buildText){return(buildText??"No build information available.").replace(/\\n/g,`
`)}async displayMetaBuild(){const metaBuildContainer=document.querySelector(CONFIG.SELECTORS.META_BUILD);if(metaBuildContainer){metaBuildContainer.className="modern-meta-build",metaBuildContainer.style.cssText="position: relative; left: 0;",metaBuildContainer.innerHTML='<div class="meta-build-loading"><div>Loading regular build...</div></div>';try{const metaBuild=(await this.dataStore.getCurrentPokemonData())?.meta_set,formattedBuild=this.formatMetaBuild(metaBuild);metaBuildContainer.innerHTML=`
                <div class="meta-build-header">
                    <div class="meta-build-icon">\u2605</div>
                    <h3 class="meta-build-title">Regular Build</h3>
                </div>
                <div class="meta-build-content">${formattedBuild}</div>
            `}catch(error){console.error("Error displaying meta build:",error),metaBuildContainer.innerHTML=`
                <div class="meta-build-header">
                    <div class="meta-build-icon">\u26A0</div>
                    <h3 class="meta-build-title">Build Information</h3>
                </div>
                <div class="meta-build-error">Unable to load build information.</div>
            `}}}async init(){await this.displayMetaBuild()}}class ModernDropdownManager extends BaseManager{constructor(dataStore){super(),this.dataStore=dataStore}async initializeDropdown(inputId,dataSource,customLabel,defaultValue){const inputField=document.getElementById(inputId);if(!inputField)return null;try{let options=[],optionsWithData=null;if(dataSource===CONFIG.DATA_SOURCES.LEVEL_RANGE){const minLevel=(await this.dataStore.getCurrentPokemonData())?.min_level??1;options=Array.from({length:100-minLevel+1},(_,i)=>minLevel+i)}else if(dataSource===CONFIG.DATA_SOURCES.GENDER_OPTIONS){const pokemonGenders=(await this.dataStore.getCurrentPokemonData())?.genders??[];if(pokemonGenders.length===0||(options=CONFIG.STATIC_DATA.GENDER_OPTIONS.filter(gender=>pokemonGenders.includes(gender)),options.length===0))return inputField.closest(".field")?.remove(),null}else if(dataSource===CONFIG.DATA_SOURCES.MOVES_NAME){const pokemonData=await this.dataStore.getCurrentPokemonData(),movesData=this.dataStore.extractDataFromPath(pokemonData,"moves")??[];Array.isArray(movesData)&&(optionsWithData=movesData.map(move=>({value:move.name,display:`${move.name} (Lv. ${move.min_level})`})),options=movesData.map(move=>move.name))}else if(dataSource===CONFIG.DATA_SOURCES.SHINY_UNLOCKED)options=CONFIG.STATIC_DATA.SHINY_OPTIONS.unlocked;else if(dataSource===CONFIG.DATA_SOURCES.SHINY_LOCKED)options=CONFIG.STATIC_DATA.SHINY_OPTIONS.locked;else if(CONFIG.STATIC_DATA[dataSource.toUpperCase()])options=CONFIG.STATIC_DATA[dataSource.toUpperCase()];else{const pokemonData=await this.dataStore.getCurrentPokemonData();options=this.dataStore.extractDataFromPath(pokemonData,dataSource)??[]}return!options||options.length===0?null:DropdownFactory.create(inputField,optionsWithData||options,customLabel,defaultValue)}catch(error){return console.error(`Failed to initialize dropdown for ${inputId}:`,error),inputField.closest(".field")?.style.setProperty("display","none"),null}}}const InputFinder={findInputByLabel(labelText){return Array.from(document.querySelectorAll("label")).find(label=>label.textContent.trim()===labelText)?.closest(".field")?.querySelector("input")}},DropdownDebugger={checkAllSyncs(){return globalSyncManager.getStatus()},fixAllSyncs(){return globalSyncManager.forceResyncAll()},getDetailedReport(){const status=globalSyncManager.getStatus();return console.group("\u{1F50D} Dropdown Sync Status Report"),console.log(`\u{1F4CA} Total Pairs: ${status.totalPairs}`),console.log(`\u2705 Healthy: ${status.healthyPairs}`),console.log(`\u26A0\uFE0F Problematic: ${status.problematicPairs}`),status.pairs.length>0&&console.table(status.pairs),console.groupEnd(),status},monitorDropdown(labelOrId,duration=3e4){const syncPair=Array.from(globalSyncManager.syncPairs.values()).find(pair=>pair.label&&pair.label.includes(labelOrId)||pair.input.id===labelOrId);if(!syncPair)return console.error(`\u274C No dropdown found matching: ${labelOrId}`),null;console.log(`\u{1F440} Monitoring dropdown "${syncPair.label}" for ${duration/1e3} seconds...`);const startTime=Date.now(),logs=[],originalPerformSync=syncPair.performSync;return syncPair.performSync=function(source,forceSync){const timestamp=new Date().toLocaleTimeString(),logEntry={timestamp,source,forceSync,selectValue:syncPair.select.value,inputValue:syncPair.input.value,elapsed:Date.now()-startTime};return logs.push(logEntry),console.log(`\u{1F4DD} [${timestamp}] Sync triggered for "${syncPair.label}" (source: ${source})`),originalPerformSync.call(this,source,forceSync)},setTimeout(()=>{syncPair.performSync=originalPerformSync,console.group(`\u{1F4CB} Monitoring Report for "${syncPair.label}"`),console.table(logs),console.log(`Total sync events: ${logs.length}`),console.groupEnd()},duration),{stop:()=>(syncPair.performSync=originalPerformSync,logs)}},simulateLoad(){console.log("\u{1F3CB}\uFE0F Simulating heavy load to test sync robustness...");const iterations=100;let completed=0;const interval=setInterval(()=>{globalSyncManager.syncPairs.forEach(syncPair=>{if(!syncPair.isDestroyed){const select=syncPair.select,options=Array.from(select.options).filter(opt=>opt.value!=="");if(options.length>0){const randomOption=options[Math.floor(Math.random()*options.length)];select.value=randomOption.value,select.dispatchEvent(new Event("change",{bubbles:!0}))}}}),completed++,completed>=iterations&&(clearInterval(interval),console.log("\u2705 Load simulation completed"),setTimeout(()=>{this.getDetailedReport().problematicPairs>0?(console.warn("\u26A0\uFE0F Issues detected after load simulation"),globalSyncManager.forceResyncAll()):console.log("\u{1F49A} All dropdowns remained stable during load simulation")},1e3))},50)}};window.DropdownDebugger=DropdownDebugger,window.DropdownSyncManager=globalSyncManager,window.addEventListener("beforeunload",()=>{globalSyncManager.cleanup()});const waitForElement=(selector,timeout=1e4)=>new Promise((resolve,reject)=>{const element=document.querySelector(selector);if(element){resolve(element);return}const observer=new MutationObserver((mutations,obs)=>{const element2=document.querySelector(selector);element2&&(obs.disconnect(),clearTimeout(timeoutId),resolve(element2))}),timeoutId=setTimeout(()=>{observer.disconnect(),reject(new Error(`Element ${selector} not found within ${timeout}ms`))},timeout);observer.observe(document.body,{childList:!0,subtree:!0})});class LazyManagerLoader{constructor(dataStore){this.dataStore=dataStore,this.managers={},this.eventManager=new EventManager}async getManager(type){if(!this.managers[type]){const ManagerClass={dropdown:()=>new ModernDropdownManager(this.dataStore),grid:()=>new GridLayoutManager(this.eventManager),button:()=>new ModernButtonSelectorManager(this.eventManager),metaBuild:()=>new ModernMetaBuildManager(this.dataStore)}[type];this.managers[type]=ManagerClass()}return this.managers[type]}}async function initializeDropdowns(dropdownManager,dataStore){const pokemonData=await dataStore.getCurrentPokemonData(),inputLabels=[CONFIG.LABELS.SHINY,CONFIG.LABELS.HELD_ITEM,CONFIG.LABELS.LEVEL,CONFIG.LABELS.ABILITY,CONFIG.LABELS.NATURE,CONFIG.LABELS.TERA_TYPE,CONFIG.LABELS.LANGUAGE,CONFIG.LABELS.BALL,CONFIG.LABELS.GENDER,CONFIG.LABELS.MOVE_1,CONFIG.LABELS.MOVE_2,CONFIG.LABELS.MOVE_3,CONFIG.LABELS.MOVE_4,CONFIG.LABELS.OT_GENDER],inputs={};inputLabels.forEach(label=>{inputs[label]=InputFinder.findInputByLabel(label)});const dropdownPromises=[];if(inputs[CONFIG.LABELS.SHINY]){const dataKey=pokemonData?.shiny_locked?CONFIG.DATA_SOURCES.SHINY_LOCKED:CONFIG.DATA_SOURCES.SHINY_UNLOCKED;dropdownPromises.push(dropdownManager.initializeDropdown(inputs[CONFIG.LABELS.SHINY].id,dataKey,"Select Shiny","No"))}if(inputs[CONFIG.LABELS.HELD_ITEM]&&(pokemonData.required_item?inputs[CONFIG.LABELS.HELD_ITEM].closest(".field")?.remove():dropdownPromises.push((async()=>{const itemsData=await dataStore.getAllItems(),itemOptions=Object.values(itemsData).map(item=>item.name).sort((a,b)=>a.localeCompare(b));return DropdownFactory.create(inputs[CONFIG.LABELS.HELD_ITEM],itemOptions,"Select Item")})())),[[CONFIG.LABELS.LEVEL,CONFIG.DATA_SOURCES.LEVEL_RANGE,"Select Level"],[CONFIG.LABELS.ABILITY,CONFIG.DATA_SOURCES.ABILITIES_NAME,"Select Ability"],[CONFIG.LABELS.NATURE,CONFIG.DATA_SOURCES.NATURES,"Select Nature"],[CONFIG.LABELS.TERA_TYPE,CONFIG.DATA_SOURCES.TERA_TYPES,"Select Tera Type"],[CONFIG.LABELS.LANGUAGE,CONFIG.DATA_SOURCES.LANGUAGES,"Select Language"],[CONFIG.LABELS.GENDER,CONFIG.DATA_SOURCES.GENDER_OPTIONS,"Select Gender"],[CONFIG.LABELS.OT_GENDER,CONFIG.DATA_SOURCES.OT_GENDER_OPTIONS,"Select OT Gender"]].forEach(([label,dataSource,placeholder])=>{inputs[label]&&dropdownPromises.push(dropdownManager.initializeDropdown(inputs[label].id,dataSource,placeholder))}),inputs[CONFIG.LABELS.BALL]){const filtered=(dataStore.extractDataFromPath(pokemonData,"legal_pokeballs")||[]).filter(ball=>ball!=="Cherish Ball");dropdownPromises.push(DropdownFactory.create(inputs[CONFIG.LABELS.BALL],filtered,"Select Ball"))}for(let i=1;i<=4;i++){const input=inputs[`Move ${i}`];input&&dropdownPromises.push(dropdownManager.initializeDropdown(input.id,CONFIG.DATA_SOURCES.MOVES_NAME,`Select Move ${i}`))}const enhancedDropdownPromises=dropdownPromises.map(async(promise,index)=>(await new Promise(resolve=>setTimeout(resolve,index*25)),promise)),results=await Promise.allSettled(enhancedDropdownPromises),successful=results.filter(r=>r.status==="fulfilled").length,failed=results.filter(r=>r.status==="rejected").length;console.log(`\u{1F4CA} Dropdown initialization: ${successful} successful, ${failed} failed`)}function setupGlobalErrorHandler(){window.addEventListener("unhandledrejection",event=>{console.error("Unhandled promise rejection:",event.reason),event.preventDefault()})}function displayInitializationError(error){console.error("\u274C Failed to initialize Pokemon Data Store:",error)}async function initializePokemonCustomizer(){const mainContainer=await waitForElement(CONFIG.SELECTORS.DPO_CONTAINER);mainContainer.classList.add("modern-details-container");const immediateParent=mainContainer.closest(CONFIG.SELECTORS.PRODUCT_FORM_INPUT);immediateParent&&(immediateParent.style.marginLeft="0",immediateParent.style.paddingLeft="0"),Object.assign(mainContainer.style,{marginLeft:"0",paddingLeft:"0",width:"100%",maxWidth:"none"});const detectedGame=GameDetector.detectGameFromTitle(),{POKEMON_JSON,ITEMS_JSON}=GameDetector.getGameUrls(detectedGame);console.log(`\u{1F3AE} Detected game: ${detectedGame}`,{POKEMON_JSON,ITEMS_JSON});const dataStore=new PokemonDataStore(POKEMON_JSON,ITEMS_JSON);if(await dataStore.loadData(),!await dataStore.getCurrentPokemonData())throw new Error("Failed to load Pokemon data for the current page.");const managerLoader=new LazyManagerLoader(dataStore);(await managerLoader.getManager("button")).init();const dropdownManager=await managerLoader.getManager("dropdown");await initializeDropdowns(dropdownManager,dataStore),await(await managerLoader.getManager("grid")).initAll(),await(await managerLoader.getManager("metaBuild")).init(),console.log("\u2705 Pokemon Data Store initialized successfully with modern UI (multi-game, no default fallback)"),setupGlobalErrorHandler()}(async()=>{try{await initializePokemonCustomizer()}catch(error){displayInitializationError(error)}})();
//# sourceMappingURL=/cdn/shop/t/27/assets/sv_pokemon.js.map?v=149560004104575712111760317087